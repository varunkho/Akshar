#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akshar.Lib
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="NWCore")]
	public partial class DataStoreDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertWN_Country(WN_Country instance);
    partial void UpdateWN_Country(WN_Country instance);
    partial void DeleteWN_Country(WN_Country instance);
    partial void InsertWN_Topic(WN_Topic instance);
    partial void UpdateWN_Topic(WN_Topic instance);
    partial void DeleteWN_Topic(WN_Topic instance);
    partial void InsertWN_Post(WN_Post instance);
    partial void UpdateWN_Post(WN_Post instance);
    partial void DeleteWN_Post(WN_Post instance);
    partial void InsertWN_Member(WN_Member instance);
    partial void UpdateWN_Member(WN_Member instance);
    partial void DeleteWN_Member(WN_Member instance);
    partial void InsertWN_Forum(WN_Forum instance);
    partial void UpdateWN_Forum(WN_Forum instance);
    partial void DeleteWN_Forum(WN_Forum instance);
    partial void InsertWN_Category(WN_Category instance);
    partial void UpdateWN_Category(WN_Category instance);
    partial void DeleteWN_Category(WN_Category instance);
    partial void InsertWN_Language(WN_Language instance);
    partial void UpdateWN_Language(WN_Language instance);
    partial void DeleteWN_Language(WN_Language instance);
    partial void InsertWN_Role(WN_Role instance);
    partial void UpdateWN_Role(WN_Role instance);
    partial void DeleteWN_Role(WN_Role instance);
    partial void InsertWN_UserRole(WN_UserRole instance);
    partial void UpdateWN_UserRole(WN_UserRole instance);
    partial void DeleteWN_UserRole(WN_UserRole instance);
    partial void InsertWN_EntityRule(WN_EntityRule instance);
    partial void UpdateWN_EntityRule(WN_EntityRule instance);
    partial void DeleteWN_EntityRule(WN_EntityRule instance);
    partial void InsertWN_HTRule(WN_HTRule instance);
    partial void UpdateWN_HTRule(WN_HTRule instance);
    partial void DeleteWN_HTRule(WN_HTRule instance);
    partial void InsertWN_GuestAct(WN_GuestAct instance);
    partial void UpdateWN_GuestAct(WN_GuestAct instance);
    partial void DeleteWN_GuestAct(WN_GuestAct instance);
    #endregion
		
		public DataStoreDataContext() : 
				base(global::Akshar.Lib.Properties.Settings.Default.NWCoreConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataStoreDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataStoreDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataStoreDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataStoreDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<WN_Country> WN_Countries
		{
			get
			{
				return this.GetTable<WN_Country>();
			}
		}
		
		public System.Data.Linq.Table<WN_Topic> WN_Topics
		{
			get
			{
				return this.GetTable<WN_Topic>();
			}
		}
		
		public System.Data.Linq.Table<WN_Post> WN_Posts
		{
			get
			{
				return this.GetTable<WN_Post>();
			}
		}
		
		public System.Data.Linq.Table<WN_Member> WN_Members
		{
			get
			{
				return this.GetTable<WN_Member>();
			}
		}
		
		public System.Data.Linq.Table<WN_Forum> WN_Forums
		{
			get
			{
				return this.GetTable<WN_Forum>();
			}
		}
		
		public System.Data.Linq.Table<WN_Category> WN_Categories
		{
			get
			{
				return this.GetTable<WN_Category>();
			}
		}
		
		public System.Data.Linq.Table<WN_Language> WN_Languages
		{
			get
			{
				return this.GetTable<WN_Language>();
			}
		}
		
		public System.Data.Linq.Table<WN_Role> WN_Roles
		{
			get
			{
				return this.GetTable<WN_Role>();
			}
		}
		
		public System.Data.Linq.Table<WN_UserRole> WN_UserRoles
		{
			get
			{
				return this.GetTable<WN_UserRole>();
			}
		}
		
		public System.Data.Linq.Table<WN_EntityRule> WN_EntityRules
		{
			get
			{
				return this.GetTable<WN_EntityRule>();
			}
		}
		
		public System.Data.Linq.Table<WN_HTRule> WN_HTRules
		{
			get
			{
				return this.GetTable<WN_HTRule>();
			}
		}
		
		public System.Data.Linq.Table<WN_GuestAct> WN_GuestActs
		{
			get
			{
				return this.GetTable<WN_GuestAct>();
			}
		}
		
		public System.Data.Linq.Table<WN_UserAct> WN_UserActs
		{
			get
			{
				return this.GetTable<WN_UserAct>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Countries")]
	public partial class WN_Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CountryCode;
		
		private string _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    #endregion
		
		public WN_Country()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode", DbType="Char(3) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Topics")]
	public partial class WN_Topic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _TopicId;
		
		private string _Subject;
		
		private short _ForumId;
		
		private int _UserId;
		
		private System.DateTime _StartedON;
		
		private string _FromIP;
		
		private byte _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTopicIdChanging(short value);
    partial void OnTopicIdChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnForumIdChanging(short value);
    partial void OnForumIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnStartedONChanging(System.DateTime value);
    partial void OnStartedONChanged();
    partial void OnFromIPChanging(string value);
    partial void OnFromIPChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    #endregion
		
		public WN_Topic()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumId", DbType="SmallInt NOT NULL")]
		public short ForumId
		{
			get
			{
				return this._ForumId;
			}
			set
			{
				if ((this._ForumId != value))
				{
					this.OnForumIdChanging(value);
					this.SendPropertyChanging();
					this._ForumId = value;
					this.SendPropertyChanged("ForumId");
					this.OnForumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartedON", DbType="SmallDateTime NOT NULL")]
		public System.DateTime StartedON
		{
			get
			{
				return this._StartedON;
			}
			set
			{
				if ((this._StartedON != value))
				{
					this.OnStartedONChanging(value);
					this.SendPropertyChanging();
					this._StartedON = value;
					this.SendPropertyChanged("StartedON");
					this.OnStartedONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromIP", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FromIP
		{
			get
			{
				return this._FromIP;
			}
			set
			{
				if ((this._FromIP != value))
				{
					this.OnFromIPChanging(value);
					this.SendPropertyChanging();
					this._FromIP = value;
					this.SendPropertyChanged("FromIP");
					this.OnFromIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Posts")]
	public partial class WN_Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PostId;
		
		private short _TopicId;
		
		private short _ForumId;
		
		private int _UserId;
		
		private System.DateTime _PostedOn;
		
		private string _FromIP;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPostIdChanging(int value);
    partial void OnPostIdChanged();
    partial void OnTopicIdChanging(short value);
    partial void OnTopicIdChanged();
    partial void OnForumIdChanging(short value);
    partial void OnForumIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPostedOnChanging(System.DateTime value);
    partial void OnPostedOnChanged();
    partial void OnFromIPChanging(string value);
    partial void OnFromIPChanged();
    #endregion
		
		public WN_Post()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PostId
		{
			get
			{
				return this._PostId;
			}
			set
			{
				if ((this._PostId != value))
				{
					this.OnPostIdChanging(value);
					this.SendPropertyChanging();
					this._PostId = value;
					this.SendPropertyChanged("PostId");
					this.OnPostIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicId", DbType="SmallInt NOT NULL")]
		public short TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumId", DbType="SmallInt NOT NULL")]
		public short ForumId
		{
			get
			{
				return this._ForumId;
			}
			set
			{
				if ((this._ForumId != value))
				{
					this.OnForumIdChanging(value);
					this.SendPropertyChanging();
					this._ForumId = value;
					this.SendPropertyChanged("ForumId");
					this.OnForumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostedOn", DbType="SmallDateTime NOT NULL")]
		public System.DateTime PostedOn
		{
			get
			{
				return this._PostedOn;
			}
			set
			{
				if ((this._PostedOn != value))
				{
					this.OnPostedOnChanging(value);
					this.SendPropertyChanging();
					this._PostedOn = value;
					this.SendPropertyChanged("PostedOn");
					this.OnPostedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromIP", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FromIP
		{
			get
			{
				return this._FromIP;
			}
			set
			{
				if ((this._FromIP != value))
				{
					this.OnFromIPChanging(value);
					this.SendPropertyChanging();
					this._FromIP = value;
					this.SendPropertyChanged("FromIP");
					this.OnFromIPChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Members")]
	public partial class WN_Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _Passwor;
		
		private string _Email;
		
		private string _FullName;
		
		private System.DateTime _CreatedON;
		
		private string _FromIP;
		
		private bool _IsDeleted;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnCreatedONChanging(System.DateTime value);
    partial void OnCreatedONChanged();
    partial void OnFromIPChanging(string value);
    partial void OnFromIPChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public WN_Member()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passwor", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Passwor;
			}
			set
			{
				if ((this._Passwor != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Passwor = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedON", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CreatedON
		{
			get
			{
				return this._CreatedON;
			}
			set
			{
				if ((this._CreatedON != value))
				{
					this.OnCreatedONChanging(value);
					this.SendPropertyChanging();
					this._CreatedON = value;
					this.SendPropertyChanged("CreatedON");
					this.OnCreatedONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromIP", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FromIP
		{
			get
			{
				return this._FromIP;
			}
			set
			{
				if ((this._FromIP != value))
				{
					this.OnFromIPChanging(value);
					this.SendPropertyChanging();
					this._FromIP = value;
					this.SendPropertyChanged("FromIP");
					this.OnFromIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Forums")]
	public partial class WN_Forum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ForumId;
		
		private string _Forum;
		
		private short _CatId;
		
		private int _UserId;
		
		private System.Nullable<int> _Mod1Id;
		
		private System.Nullable<int> _Mod2Id;
		
		private System.DateTime _CreatedOn;
		
		private string _FromIP;
		
		private string _Description;
		
		private System.Nullable<bool> _IsCreatorMod;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForumIdChanging(short value);
    partial void OnForumIdChanged();
    partial void OnForumChanging(string value);
    partial void OnForumChanged();
    partial void OnCatIdChanging(short value);
    partial void OnCatIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnMod1IdChanging(System.Nullable<int> value);
    partial void OnMod1IdChanged();
    partial void OnMod2IdChanging(System.Nullable<int> value);
    partial void OnMod2IdChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnFromIPChanging(string value);
    partial void OnFromIPChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsCreatorModChanging(System.Nullable<bool> value);
    partial void OnIsCreatorModChanged();
    #endregion
		
		public WN_Forum()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ForumId
		{
			get
			{
				return this._ForumId;
			}
			set
			{
				if ((this._ForumId != value))
				{
					this.OnForumIdChanging(value);
					this.SendPropertyChanging();
					this._ForumId = value;
					this.SendPropertyChanged("ForumId");
					this.OnForumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Forum", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Forum
		{
			get
			{
				return this._Forum;
			}
			set
			{
				if ((this._Forum != value))
				{
					this.OnForumChanging(value);
					this.SendPropertyChanging();
					this._Forum = value;
					this.SendPropertyChanged("Forum");
					this.OnForumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatId", DbType="SmallInt NOT NULL")]
		public short CatId
		{
			get
			{
				return this._CatId;
			}
			set
			{
				if ((this._CatId != value))
				{
					this.OnCatIdChanging(value);
					this.SendPropertyChanging();
					this._CatId = value;
					this.SendPropertyChanged("CatId");
					this.OnCatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mod1Id", DbType="Int")]
		public System.Nullable<int> Mod1Id
		{
			get
			{
				return this._Mod1Id;
			}
			set
			{
				if ((this._Mod1Id != value))
				{
					this.OnMod1IdChanging(value);
					this.SendPropertyChanging();
					this._Mod1Id = value;
					this.SendPropertyChanged("Mod1Id");
					this.OnMod1IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mod2Id", DbType="Int")]
		public System.Nullable<int> Mod2Id
		{
			get
			{
				return this._Mod2Id;
			}
			set
			{
				if ((this._Mod2Id != value))
				{
					this.OnMod2IdChanging(value);
					this.SendPropertyChanging();
					this._Mod2Id = value;
					this.SendPropertyChanged("Mod2Id");
					this.OnMod2IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromIP", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FromIP
		{
			get
			{
				return this._FromIP;
			}
			set
			{
				if ((this._FromIP != value))
				{
					this.OnFromIPChanging(value);
					this.SendPropertyChanging();
					this._FromIP = value;
					this.SendPropertyChanged("FromIP");
					this.OnFromIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCreatorMod", DbType="Bit")]
		public System.Nullable<bool> IsCreatorMod
		{
			get
			{
				return this._IsCreatorMod;
			}
			set
			{
				if ((this._IsCreatorMod != value))
				{
					this.OnIsCreatorModChanging(value);
					this.SendPropertyChanging();
					this._IsCreatorMod = value;
					this.SendPropertyChanged("IsCreatorMod");
					this.OnIsCreatorModChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class WN_Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _CatId;
		
		private string _Category;
		
		private System.Nullable<short> _ParentCatId;
		
		private int _UserId;
		
		private System.DateTime _CreatedOn;
		
		private string _FromIp;
		
		private string _Describtion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCatIdChanging(short value);
    partial void OnCatIdChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnParentCatIdChanging(System.Nullable<short> value);
    partial void OnParentCatIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnFromIpChanging(string value);
    partial void OnFromIpChanged();
    partial void OnDescribtionChanging(string value);
    partial void OnDescribtionChanged();
    #endregion
		
		public WN_Category()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatId", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short CatId
		{
			get
			{
				return this._CatId;
			}
			set
			{
				if ((this._CatId != value))
				{
					this.OnCatIdChanging(value);
					this.SendPropertyChanging();
					this._CatId = value;
					this.SendPropertyChanged("CatId");
					this.OnCatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCatId", DbType="SmallInt")]
		public System.Nullable<short> ParentCatId
		{
			get
			{
				return this._ParentCatId;
			}
			set
			{
				if ((this._ParentCatId != value))
				{
					this.OnParentCatIdChanging(value);
					this.SendPropertyChanging();
					this._ParentCatId = value;
					this.SendPropertyChanged("ParentCatId");
					this.OnParentCatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromIp", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FromIp
		{
			get
			{
				return this._FromIp;
			}
			set
			{
				if ((this._FromIp != value))
				{
					this.OnFromIpChanging(value);
					this.SendPropertyChanging();
					this._FromIp = value;
					this.SendPropertyChanged("FromIp");
					this.OnFromIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Describtion", DbType="VarChar(200)")]
		public string Describtion
		{
			get
			{
				return this._Describtion;
			}
			set
			{
				if ((this._Describtion != value))
				{
					this.OnDescribtionChanging(value);
					this.SendPropertyChanging();
					this._Describtion = value;
					this.SendPropertyChanged("Describtion");
					this.OnDescribtionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Languages")]
	public partial class WN_Language : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _LangId;
		
		private string _Language;
		
		private ResourceStatus _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLangIdChanging(byte value);
    partial void OnLangIdChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnStatusChanging(ResourceStatus value);
    partial void OnStatusChanged();
    #endregion
		
		public WN_Language()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LangId", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte LangId
		{
			get
			{
				return this._LangId;
			}
			set
			{
				if ((this._LangId != value))
				{
					this.OnLangIdChanging(value);
					this.SendPropertyChanging();
					this._LangId = value;
					this.SendPropertyChanged("LangId");
					this.OnLangIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public ResourceStatus Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class WN_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _RoleId;
		
		private string _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIdChanging(byte value);
    partial void OnRoleIdChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    #endregion
		
		public WN_Role()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="VarChar(25) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoles")]
	public partial class WN_UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserRolesId;
		
		private int _UserId;
		
		private URoles _RoleId;
		
		private NWObjects _EntityTypeId;
		
		private short _EntityId;
		
		private Activities _ActivityId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserRolesIdChanging(int value);
    partial void OnUserRolesIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(URoles value);
    partial void OnRoleIdChanged();
    partial void OnEntityTypeIdChanging(NWObjects value);
    partial void OnEntityTypeIdChanged();
    partial void OnEntityIdChanging(short value);
    partial void OnEntityIdChanged();
    partial void OnActivityIdChanging(Activities value);
    partial void OnActivityIdChanged();
    #endregion
		
		public WN_UserRole()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRolesId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserRolesId
		{
			get
			{
				return this._UserRolesId;
			}
			set
			{
				if ((this._UserRolesId != value))
				{
					this.OnUserRolesIdChanging(value);
					this.SendPropertyChanging();
					this._UserRolesId = value;
					this.SendPropertyChanged("UserRolesId");
					this.OnUserRolesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public URoles RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityTypeId", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public NWObjects EntityTypeId
		{
			get
			{
				return this._EntityTypeId;
			}
			set
			{
				if ((this._EntityTypeId != value))
				{
					this.OnEntityTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EntityTypeId = value;
					this.SendPropertyChanged("EntityTypeId");
					this.OnEntityTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="SmallInt NOT NULL")]
		public short EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityId", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public Activities ActivityId
		{
			get
			{
				return this._ActivityId;
			}
			set
			{
				if ((this._ActivityId != value))
				{
					this.OnActivityIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityId = value;
					this.SendPropertyChanged("ActivityId");
					this.OnActivityIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityRules")]
	public partial class WN_EntityRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EntityRuleId;
		
		private NWObjects _EntityTypeId;
		
		private short _EntityId;
		
		private Activities _ActivityId;
		
		private URoles _RoleId;
		
		private System.Nullable<byte> _SubRoleId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityRuleIdChanging(int value);
    partial void OnEntityRuleIdChanged();
    partial void OnEntityTypeIdChanging(NWObjects value);
    partial void OnEntityTypeIdChanged();
    partial void OnEntityIdChanging(short value);
    partial void OnEntityIdChanged();
    partial void OnActivityIdChanging(Activities value);
    partial void OnActivityIdChanged();
    partial void OnRoleIdChanging(URoles value);
    partial void OnRoleIdChanged();
    partial void OnSubRoleIdChanging(System.Nullable<byte> value);
    partial void OnSubRoleIdChanged();
    #endregion
		
		public WN_EntityRule()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityRuleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EntityRuleId
		{
			get
			{
				return this._EntityRuleId;
			}
			set
			{
				if ((this._EntityRuleId != value))
				{
					this.OnEntityRuleIdChanging(value);
					this.SendPropertyChanging();
					this._EntityRuleId = value;
					this.SendPropertyChanged("EntityRuleId");
					this.OnEntityRuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityTypeId", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public NWObjects EntityTypeId
		{
			get
			{
				return this._EntityTypeId;
			}
			set
			{
				if ((this._EntityTypeId != value))
				{
					this.OnEntityTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EntityTypeId = value;
					this.SendPropertyChanged("EntityTypeId");
					this.OnEntityTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="SmallInt NOT NULL")]
		public short EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityId", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public Activities ActivityId
		{
			get
			{
				return this._ActivityId;
			}
			set
			{
				if ((this._ActivityId != value))
				{
					this.OnActivityIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityId = value;
					this.SendPropertyChanged("ActivityId");
					this.OnActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public URoles RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubRoleId", DbType="TinyInt")]
		public System.Nullable<byte> SubRoleId
		{
			get
			{
				return this._SubRoleId;
			}
			set
			{
				if ((this._SubRoleId != value))
				{
					this.OnSubRoleIdChanging(value);
					this.SendPropertyChanging();
					this._SubRoleId = value;
					this.SendPropertyChanged("SubRoleId");
					this.OnSubRoleIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HTRules")]
	public partial class WN_HTRule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _HTRuleId;
		
		private NWObjects _EntityTypeId;
		
		private short _EntityId;
		
		private short _ParentHTRuleId;
		
		private int _UserId;
		
		private System.DateTime _CreatedOn;
		
		private string _FromIp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHTRuleIdChanging(short value);
    partial void OnHTRuleIdChanged();
    partial void OnEntityTypeIdChanging(NWObjects value);
    partial void OnEntityTypeIdChanged();
    partial void OnEntityIdChanging(short value);
    partial void OnEntityIdChanged();
    partial void OnParentHTRuleIdChanging(short value);
    partial void OnParentHTRuleIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnFromIpChanging(string value);
    partial void OnFromIpChanged();
    #endregion
		
		public WN_HTRule()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HTRuleId", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short HTRuleId
		{
			get
			{
				return this._HTRuleId;
			}
			set
			{
				if ((this._HTRuleId != value))
				{
					this.OnHTRuleIdChanging(value);
					this.SendPropertyChanging();
					this._HTRuleId = value;
					this.SendPropertyChanged("HTRuleId");
					this.OnHTRuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityTypeId", DbType="TinyInt NOT NULL", CanBeNull=false)]
		public NWObjects EntityTypeId
		{
			get
			{
				return this._EntityTypeId;
			}
			set
			{
				if ((this._EntityTypeId != value))
				{
					this.OnEntityTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EntityTypeId = value;
					this.SendPropertyChanged("EntityTypeId");
					this.OnEntityTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="SmallInt NOT NULL")]
		public short EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentHTRuleId", DbType="SmallInt NOT NULL")]
		public short ParentHTRuleId
		{
			get
			{
				return this._ParentHTRuleId;
			}
			set
			{
				if ((this._ParentHTRuleId != value))
				{
					this.OnParentHTRuleIdChanging(value);
					this.SendPropertyChanging();
					this._ParentHTRuleId = value;
					this.SendPropertyChanged("ParentHTRuleId");
					this.OnParentHTRuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="SmallDateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromIp", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string FromIp
		{
			get
			{
				return this._FromIp;
			}
			set
			{
				if ((this._FromIp != value))
				{
					this.OnFromIpChanging(value);
					this.SendPropertyChanging();
					this._FromIp = value;
					this.SendPropertyChanged("FromIp");
					this.OnFromIpChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GuestActs")]
	public partial class WN_GuestAct : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FromIp;
		
		private byte _ActivityId;
		
		private byte _EntityTypeId;
		
		private short _EntityId;
		
		private System.DateTime _StartedOn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFromIpChanging(string value);
    partial void OnFromIpChanged();
    partial void OnActivityIdChanging(byte value);
    partial void OnActivityIdChanged();
    partial void OnEntityTypeIdChanging(byte value);
    partial void OnEntityTypeIdChanged();
    partial void OnEntityIdChanging(short value);
    partial void OnEntityIdChanged();
    partial void OnStartedOnChanging(System.DateTime value);
    partial void OnStartedOnChanged();
    #endregion
		
		public WN_GuestAct()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromIp", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FromIp
		{
			get
			{
				return this._FromIp;
			}
			set
			{
				if ((this._FromIp != value))
				{
					this.OnFromIpChanging(value);
					this.SendPropertyChanging();
					this._FromIp = value;
					this.SendPropertyChanged("FromIp");
					this.OnFromIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityId", DbType="TinyInt NOT NULL")]
		public byte ActivityId
		{
			get
			{
				return this._ActivityId;
			}
			set
			{
				if ((this._ActivityId != value))
				{
					this.OnActivityIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityId = value;
					this.SendPropertyChanged("ActivityId");
					this.OnActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityTypeId", DbType="TinyInt NOT NULL")]
		public byte EntityTypeId
		{
			get
			{
				return this._EntityTypeId;
			}
			set
			{
				if ((this._EntityTypeId != value))
				{
					this.OnEntityTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EntityTypeId = value;
					this.SendPropertyChanged("EntityTypeId");
					this.OnEntityTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="SmallInt NOT NULL")]
		public short EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartedOn", DbType="SmallDateTime NOT NULL")]
		public System.DateTime StartedOn
		{
			get
			{
				return this._StartedOn;
			}
			set
			{
				if ((this._StartedOn != value))
				{
					this.OnStartedOnChanging(value);
					this.SendPropertyChanging();
					this._StartedOn = value;
					this.SendPropertyChanged("StartedOn");
					this.OnStartedOnChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserActs")]
	public partial class WN_UserAct
	{
		
		private int _UserId;
		
		private byte _ActivityId;
		
		private byte _EntityTypeId;
		
		private short _EntityId;
		
		private System.DateTime _StartedOn;
		
		public WN_UserAct()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this._UserId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityId", DbType="TinyInt NOT NULL")]
		public byte ActivityId
		{
			get
			{
				return this._ActivityId;
			}
			set
			{
				if ((this._ActivityId != value))
				{
					this._ActivityId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityTypeId", DbType="TinyInt NOT NULL")]
		public byte EntityTypeId
		{
			get
			{
				return this._EntityTypeId;
			}
			set
			{
				if ((this._EntityTypeId != value))
				{
					this._EntityTypeId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityId", DbType="SmallInt NOT NULL")]
		public short EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					this._EntityId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartedOn", DbType="SmallDateTime NOT NULL")]
		public System.DateTime StartedOn
		{
			get
			{
				return this._StartedOn;
			}
			set
			{
				if ((this._StartedOn != value))
				{
					this._StartedOn = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
